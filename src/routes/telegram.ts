import { Hono } from 'hono'
import { CloudflareBindings, TelegramMessage } from '../types'

const app = new Hono<{ Bindings: CloudflareBindings }>()

// Telegram webhook endpoint
app.post('/webhook', async (c) => {
  try {
    const body = await c.req.json()
    const message: TelegramMessage = body.message
    
    if (!message) {
      return c.json({ ok: true, result: 'No message' })
    }
    
    const userId = message.from.id.toString()
    const username = message.from.username || ''
    const userFullName = `${message.from.first_name} ${message.from.last_name || ''}`.trim()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    let user = await c.env.DB.prepare(
      'SELECT * FROM users WHERE telegram_user_id = ?'
    ).bind(userId).first()
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!user) {
      await c.env.DB.prepare(`
        INSERT INTO users (telegram_user_id, telegram_username, name, role)
        VALUES (?, ?, ?, 'user')
      `).bind(userId, username, userFullName).run()
      
      user = { 
        telegram_user_id: userId, 
        telegram_username: username, 
        name: userFullName, 
        role: 'user' 
      }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (message.text) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
      if (message.text.startsWith('/')) {
        return await handleCommand(c, message, user)
      }
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const request = await c.env.DB.prepare(`
        INSERT INTO requests (
          telegram_user_id, telegram_username, user_name, 
          message_text, status
        ) VALUES (?, ?, ?, ?, '–Ω–æ–≤–∞—è')
      `).bind(
        userId,
        username,
        userFullName,
        message.text
      ).run()
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await sendTelegramMessage(
        c.env.TELEGRAM_BOT_TOKEN,
        message.chat.id,
        `‚úÖ –ó–∞—è–≤–∫–∞ ‚Ññ${request.meta?.last_row_id} –ø—Ä–∏–Ω—è—Ç–∞ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é.\n\n` +
        `–í–∞—à —Ç–µ–∫—Å—Ç: "${message.text}"\n\n` +
        '–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      )
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
      await notifyAdmins(c, {
        requestId: request.meta?.last_row_id,
        userName: userFullName,
        messageText: message.text
      })
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Gemini (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
      if (c.env.GOOGLE_GENERATIVE_AI_API_KEY) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
        analyzeRequestWithGemini(c, request.meta?.last_row_id as number, message.text)
          .catch(error => console.error('Gemini analysis error:', error))
      }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (message.voice) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
        const fileInfo = await getTelegramFile(c.env.TELEGRAM_BOT_TOKEN, message.voice.file_id)
        const audioUrl = `https://api.telegram.org/file/bot${c.env.TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        const request = await c.env.DB.prepare(`
          INSERT INTO requests (
            telegram_user_id, telegram_username, user_name, 
            message_text, audio_file_url, status
          ) VALUES (?, ?, ?, ?, ?, '–Ω–æ–≤–∞—è')
        `).bind(
          userId,
          username,
          userFullName,
          '[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]',
          audioUrl
        ).run()
        
        await sendTelegramMessage(
          c.env.TELEGRAM_BOT_TOKEN,
          message.chat.id,
          `üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ${request.meta?.last_row_id} –ø–æ–ª—É—á–µ–Ω–∞.\n\n` +
          '–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.'
        )
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await notifyAdmins(c, {
          requestId: request.meta?.last_row_id,
          userName: userFullName,
          messageText: '[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]',
          hasAudio: true
        })
        
        // –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ Gemini (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if (c.env.GOOGLE_GENERATIVE_AI_API_KEY) {
          transcribeAudioWithGemini(c, request.meta?.last_row_id as number, audioUrl)
            .catch(error => console.error('Audio transcription error:', error))
        }
        
      } catch (error) {
        console.error('Voice message processing error:', error)
        await sendTelegramMessage(
          c.env.TELEGRAM_BOT_TOKEN,
          message.chat.id,
          '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç.'
        )
      }
    }
    
    return c.json({ ok: true })
  } catch (error) {
    console.error('Telegram webhook error:', error)
    return c.json({ ok: false, error: 'Internal server error' }, 500)
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
async function handleCommand(c: any, message: TelegramMessage, user: any) {
  const command = message.text?.split(' ')[0]
  
  switch (command) {
    case '/start':
      await sendTelegramMessage(
        c.env.TELEGRAM_BOT_TOKEN,
        message.chat.id,
        `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name}!\n\n` +
        '–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.\n\n' +
        'üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n' +
        'ü§ñ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫—É –∏ –ø–µ—Ä–µ–¥–∞—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n' +
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
        '/help - –ø–æ–º–æ—â—å\n' +
        '/status - —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫\n' +
        '/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ'
      )
      break
      
    case '/help':
      await sendTelegramMessage(
        c.env.TELEGRAM_BOT_TOKEN,
        message.chat.id,
        'üìã –ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É:\n\n' +
        '1. –û–ø–∏—à–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n' +
        '2. –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ)\n' +
        '3. –û—Ç–º–µ—Ç—å—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞\n\n' +
        'üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞—è–≤–æ–∫:\n' +
        '‚Ä¢ "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ –§—É–Ω–¥–∞–º–µ–Ω—Ç—ã - –Ω–µ–≤–µ—Ä–Ω–∞—è –º–∞—Ä–∫–∞ –±–µ—Ç–æ–Ω–∞"\n' +
        '‚Ä¢ "–î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ö—Ä–æ–≤–ª—è –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–¥–æ—Å—Ç–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"\n' +
        '‚Ä¢ "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ö–µ–º—É —ç–ª–µ–∫—Ç—Ä–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º –Ω–æ—Ä–º–∞–º"\n\n' +
        'üé§ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
      )
      break
      
    case '/status':
      const requests = await c.env.DB.prepare(
        'SELECT * FROM requests WHERE telegram_user_id = ? ORDER BY created_at DESC LIMIT 5'
      ).bind(user.telegram_user_id).all()
      
      if (!requests.results?.length) {
        await sendTelegramMessage(
          c.env.TELEGRAM_BOT_TOKEN,
          message.chat.id,
          'üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.'
        )
      } else {
        let statusText = 'üìä –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n'
        requests.results.forEach((req: any, index: number) => {
          const statusEmoji = getStatusEmoji(req.status)
          const date = new Date(req.created_at).toLocaleString('ru-RU')
          statusText += `${statusEmoji} –ó–∞—è–≤–∫–∞ ‚Ññ${req.id}\n`
          statusText += `üìÖ ${date}\n`
          statusText += `üí¨ ${req.message_text.substring(0, 100)}${req.message_text.length > 100 ? '...' : ''}\n\n`
        })
        
        await sendTelegramMessage(c.env.TELEGRAM_BOT_TOKEN, message.chat.id, statusText)
      }
      break
      
    case '/info':
      await sendTelegramMessage(
        c.env.TELEGRAM_BOT_TOKEN,
        message.chat.id,
        'üè¢ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏\n' +
        '–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n\n' +
        'ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n' +
        '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞—è–≤–æ–∫ —Å –ø–æ–º–æ—â—å—é AI\n' +
        '‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏ —Ç–∏–ø—É\n' +
        '‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n' +
        '‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n\n' +
        'üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @admin_user\n' +
        'üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: +7-xxx-xxx-xxxx'
      )
      break
      
    default:
      await sendTelegramMessage(
        c.env.TELEGRAM_BOT_TOKEN,
        message.chat.id,
        '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.'
      )
  }
  
  return c.json({ ok: true })
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(botToken: string, chatId: number, text: string) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML'
      })
    })
    
    return await response.json()
  } catch (error) {
    console.error('Error sending Telegram message:', error)
    throw error
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –æ—Ç Telegram
async function getTelegramFile(botToken: string, fileId: string) {
  const response = await fetch(`https://api.telegram.org/bot${botToken}/getFile?file_id=${fileId}`)
  const data = await response.json()
  return data.result
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async function notifyAdmins(c: any, data: { requestId: any, userName: string, messageText: string, hasAudio?: boolean }) {
  try {
    const admins = await c.env.DB.prepare(
      'SELECT telegram_user_id FROM users WHERE role IN ("admin", "manager") AND is_active = TRUE'
    ).all()
    
    const notificationText = 
      `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ${data.requestId}\n\n` +
      `üë§ –û—Ç: ${data.userName}\n` +
      `üí¨ –¢–µ–∫—Å—Ç: ${data.messageText}\n` +
      (data.hasAudio ? 'üé§ –°–æ–¥–µ—Ä–∂–∏—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' : '') +
      `\nüîó –ü—Ä–æ—Å–º–æ—Ç—Ä: /admin`
    
    for (const admin of (admins.results || [])) {
      await sendTelegramMessage(
        c.env.TELEGRAM_BOT_TOKEN,
        parseInt((admin as any).telegram_user_id),
        notificationText
      )
    }
  } catch (error) {
    console.error('Error notifying admins:', error)
  }
}

// –ê–Ω–∞–ª–∏–∑ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ Gemini (–∑–∞–≥–ª—É—à–∫–∞)
async function analyzeRequestWithGemini(c: any, requestId: number, text: string) {
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤—ã–∑–æ–≤ Gemini API
  console.log(`Analyzing request ${requestId} with Gemini: ${text}`)
}

// –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Gemini (–∑–∞–≥–ª—É—à–∫–∞)
async function transcribeAudioWithGemini(c: any, requestId: number, audioUrl: string) {
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ Gemini
  console.log(`Transcribing audio for request ${requestId}: ${audioUrl}`)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
function getStatusEmoji(status: string): string {
  const statusEmojis: { [key: string]: string } = {
    '–Ω–æ–≤–∞—è': 'üÜï',
    '–Ω–∞_—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏': 'üëÄ',
    '–æ–¥–æ–±—Ä–µ–Ω–∞': '‚úÖ',
    '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞': '‚ùå',
    '–≤_—Ä–∞–±–æ—Ç–µ': 'üîÑ',
    '–∑–∞–≤–µ—Ä—à–µ–Ω–∞': '‚úÖ'
  }
  return statusEmojis[status] || 'üìù'
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook (–¥–ª—è development)
app.post('/set-webhook', async (c) => {
  try {
    const { url } = await c.req.json()
    const botToken = c.env.TELEGRAM_BOT_TOKEN
    
    const response = await fetch(`https://api.telegram.org/bot${botToken}/setWebhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        url: url || c.env.TELEGRAM_WEBHOOK_URL,
        allowed_updates: ['message']
      })
    })
    
    const result = await response.json()
    return c.json({ success: true, data: result })
  } catch (error) {
    console.error('Error setting webhook:', error)
    return c.json({ success: false, error: '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook' }, 500)
  }
})

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
app.get('/webhook-info', async (c) => {
  try {
    const botToken = c.env.TELEGRAM_BOT_TOKEN
    const response = await fetch(`https://api.telegram.org/bot${botToken}/getWebhookInfo`)
    const result = await response.json()
    
    return c.json({ success: true, data: result })
  } catch (error) {
    console.error('Error getting webhook info:', error)
    return c.json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook' }, 500)
  }
})

export default app